// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.AppCompatToggleButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.swipefwd.R;
import com.swipefwd.utils.segmentedButtonTemp.SegmentedButton;
import com.swipefwd.utils.segmentedButtonTemp.SegmentedButtonGroup2;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAdvancePreferenceBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final SegmentedButton btnCM;

  @NonNull
  public final MaterialButton btnContinue;

  @NonNull
  public final SegmentedButton btnFt;

  @NonNull
  public final MaterialButton btnTipGotIt;

  @NonNull
  public final TextView edtAstroSign;

  @NonNull
  public final TextInputEditText edtCaste;

  @NonNull
  public final TextInputEditText edtChildren;

  @NonNull
  public final TextInputEditText edtEducation;

  @NonNull
  public final TextInputEditText edtLanguage;

  @NonNull
  public final TextInputEditText edtLookingFor;

  @NonNull
  public final TextInputEditText edtReligion;

  @NonNull
  public final TextInputEditText edtSmoking;

  @NonNull
  public final AppCompatImageView imageFaded;

  @NonNull
  public final AppCompatImageView imgAstro;

  @NonNull
  public final AppCompatImageView imgInfo;

  @NonNull
  public final AppCompatImageView imgToolTip;

  @NonNull
  public final AppCompatImageView ivBack;

  @NonNull
  public final AppCompatImageView ivInfo2;

  @NonNull
  public final AppCompatTextView labelPrefLocation;

  @NonNull
  public final AppCompatTextView labelVerifiedProfiles;

  @NonNull
  public final ConstraintLayout layoutAstroSign;

  @NonNull
  public final ConstraintLayout layoutMain;

  @NonNull
  public final ConstraintLayout layoutVerifiedProfiles;

  @NonNull
  public final LinearLayout linLocAnim;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final RelativeLayout relFadedView;

  @NonNull
  public final RelativeLayout rlToggle;

  @NonNull
  public final SegmentedButtonGroup2 segmentedHeight;

  @NonNull
  public final AppCompatToggleButton toggleProfiles;

  @NonNull
  public final ImageView toolTipArrow;

  @NonNull
  public final TextView txtHeight;

  @NonNull
  public final AppCompatTextView txtTipDesc;

  @NonNull
  public final AppCompatTextView txtTipHeader;

  @NonNull
  public final AppCompatTextView txtTitle;

  private ActivityAdvancePreferenceBinding(@NonNull ConstraintLayout rootView,
      @NonNull SegmentedButton btnCM, @NonNull MaterialButton btnContinue,
      @NonNull SegmentedButton btnFt, @NonNull MaterialButton btnTipGotIt,
      @NonNull TextView edtAstroSign, @NonNull TextInputEditText edtCaste,
      @NonNull TextInputEditText edtChildren, @NonNull TextInputEditText edtEducation,
      @NonNull TextInputEditText edtLanguage, @NonNull TextInputEditText edtLookingFor,
      @NonNull TextInputEditText edtReligion, @NonNull TextInputEditText edtSmoking,
      @NonNull AppCompatImageView imageFaded, @NonNull AppCompatImageView imgAstro,
      @NonNull AppCompatImageView imgInfo, @NonNull AppCompatImageView imgToolTip,
      @NonNull AppCompatImageView ivBack, @NonNull AppCompatImageView ivInfo2,
      @NonNull AppCompatTextView labelPrefLocation,
      @NonNull AppCompatTextView labelVerifiedProfiles, @NonNull ConstraintLayout layoutAstroSign,
      @NonNull ConstraintLayout layoutMain, @NonNull ConstraintLayout layoutVerifiedProfiles,
      @NonNull LinearLayout linLocAnim, @NonNull NestedScrollView nestedScrollView,
      @NonNull RelativeLayout relFadedView, @NonNull RelativeLayout rlToggle,
      @NonNull SegmentedButtonGroup2 segmentedHeight, @NonNull AppCompatToggleButton toggleProfiles,
      @NonNull ImageView toolTipArrow, @NonNull TextView txtHeight,
      @NonNull AppCompatTextView txtTipDesc, @NonNull AppCompatTextView txtTipHeader,
      @NonNull AppCompatTextView txtTitle) {
    this.rootView = rootView;
    this.btnCM = btnCM;
    this.btnContinue = btnContinue;
    this.btnFt = btnFt;
    this.btnTipGotIt = btnTipGotIt;
    this.edtAstroSign = edtAstroSign;
    this.edtCaste = edtCaste;
    this.edtChildren = edtChildren;
    this.edtEducation = edtEducation;
    this.edtLanguage = edtLanguage;
    this.edtLookingFor = edtLookingFor;
    this.edtReligion = edtReligion;
    this.edtSmoking = edtSmoking;
    this.imageFaded = imageFaded;
    this.imgAstro = imgAstro;
    this.imgInfo = imgInfo;
    this.imgToolTip = imgToolTip;
    this.ivBack = ivBack;
    this.ivInfo2 = ivInfo2;
    this.labelPrefLocation = labelPrefLocation;
    this.labelVerifiedProfiles = labelVerifiedProfiles;
    this.layoutAstroSign = layoutAstroSign;
    this.layoutMain = layoutMain;
    this.layoutVerifiedProfiles = layoutVerifiedProfiles;
    this.linLocAnim = linLocAnim;
    this.nestedScrollView = nestedScrollView;
    this.relFadedView = relFadedView;
    this.rlToggle = rlToggle;
    this.segmentedHeight = segmentedHeight;
    this.toggleProfiles = toggleProfiles;
    this.toolTipArrow = toolTipArrow;
    this.txtHeight = txtHeight;
    this.txtTipDesc = txtTipDesc;
    this.txtTipHeader = txtTipHeader;
    this.txtTitle = txtTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAdvancePreferenceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAdvancePreferenceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_advance_preference, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAdvancePreferenceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCM;
      SegmentedButton btnCM = ViewBindings.findChildViewById(rootView, id);
      if (btnCM == null) {
        break missingId;
      }

      id = R.id.btnContinue;
      MaterialButton btnContinue = ViewBindings.findChildViewById(rootView, id);
      if (btnContinue == null) {
        break missingId;
      }

      id = R.id.btnFt;
      SegmentedButton btnFt = ViewBindings.findChildViewById(rootView, id);
      if (btnFt == null) {
        break missingId;
      }

      id = R.id.btnTipGotIt;
      MaterialButton btnTipGotIt = ViewBindings.findChildViewById(rootView, id);
      if (btnTipGotIt == null) {
        break missingId;
      }

      id = R.id.edtAstroSign;
      TextView edtAstroSign = ViewBindings.findChildViewById(rootView, id);
      if (edtAstroSign == null) {
        break missingId;
      }

      id = R.id.edtCaste;
      TextInputEditText edtCaste = ViewBindings.findChildViewById(rootView, id);
      if (edtCaste == null) {
        break missingId;
      }

      id = R.id.edtChildren;
      TextInputEditText edtChildren = ViewBindings.findChildViewById(rootView, id);
      if (edtChildren == null) {
        break missingId;
      }

      id = R.id.edtEducation;
      TextInputEditText edtEducation = ViewBindings.findChildViewById(rootView, id);
      if (edtEducation == null) {
        break missingId;
      }

      id = R.id.edtLanguage;
      TextInputEditText edtLanguage = ViewBindings.findChildViewById(rootView, id);
      if (edtLanguage == null) {
        break missingId;
      }

      id = R.id.edtLookingFor;
      TextInputEditText edtLookingFor = ViewBindings.findChildViewById(rootView, id);
      if (edtLookingFor == null) {
        break missingId;
      }

      id = R.id.edtReligion;
      TextInputEditText edtReligion = ViewBindings.findChildViewById(rootView, id);
      if (edtReligion == null) {
        break missingId;
      }

      id = R.id.edtSmoking;
      TextInputEditText edtSmoking = ViewBindings.findChildViewById(rootView, id);
      if (edtSmoking == null) {
        break missingId;
      }

      id = R.id.imageFaded;
      AppCompatImageView imageFaded = ViewBindings.findChildViewById(rootView, id);
      if (imageFaded == null) {
        break missingId;
      }

      id = R.id.imgAstro;
      AppCompatImageView imgAstro = ViewBindings.findChildViewById(rootView, id);
      if (imgAstro == null) {
        break missingId;
      }

      id = R.id.imgInfo;
      AppCompatImageView imgInfo = ViewBindings.findChildViewById(rootView, id);
      if (imgInfo == null) {
        break missingId;
      }

      id = R.id.imgToolTip;
      AppCompatImageView imgToolTip = ViewBindings.findChildViewById(rootView, id);
      if (imgToolTip == null) {
        break missingId;
      }

      id = R.id.ivBack;
      AppCompatImageView ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.ivInfo2;
      AppCompatImageView ivInfo2 = ViewBindings.findChildViewById(rootView, id);
      if (ivInfo2 == null) {
        break missingId;
      }

      id = R.id.labelPrefLocation;
      AppCompatTextView labelPrefLocation = ViewBindings.findChildViewById(rootView, id);
      if (labelPrefLocation == null) {
        break missingId;
      }

      id = R.id.labelVerifiedProfiles;
      AppCompatTextView labelVerifiedProfiles = ViewBindings.findChildViewById(rootView, id);
      if (labelVerifiedProfiles == null) {
        break missingId;
      }

      id = R.id.layoutAstroSign;
      ConstraintLayout layoutAstroSign = ViewBindings.findChildViewById(rootView, id);
      if (layoutAstroSign == null) {
        break missingId;
      }

      ConstraintLayout layoutMain = (ConstraintLayout) rootView;

      id = R.id.layoutVerifiedProfiles;
      ConstraintLayout layoutVerifiedProfiles = ViewBindings.findChildViewById(rootView, id);
      if (layoutVerifiedProfiles == null) {
        break missingId;
      }

      id = R.id.linLocAnim;
      LinearLayout linLocAnim = ViewBindings.findChildViewById(rootView, id);
      if (linLocAnim == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.relFadedView;
      RelativeLayout relFadedView = ViewBindings.findChildViewById(rootView, id);
      if (relFadedView == null) {
        break missingId;
      }

      id = R.id.rlToggle;
      RelativeLayout rlToggle = ViewBindings.findChildViewById(rootView, id);
      if (rlToggle == null) {
        break missingId;
      }

      id = R.id.segmentedHeight;
      SegmentedButtonGroup2 segmentedHeight = ViewBindings.findChildViewById(rootView, id);
      if (segmentedHeight == null) {
        break missingId;
      }

      id = R.id.toggleProfiles;
      AppCompatToggleButton toggleProfiles = ViewBindings.findChildViewById(rootView, id);
      if (toggleProfiles == null) {
        break missingId;
      }

      id = R.id.toolTipArrow;
      ImageView toolTipArrow = ViewBindings.findChildViewById(rootView, id);
      if (toolTipArrow == null) {
        break missingId;
      }

      id = R.id.txtHeight;
      TextView txtHeight = ViewBindings.findChildViewById(rootView, id);
      if (txtHeight == null) {
        break missingId;
      }

      id = R.id.txtTipDesc;
      AppCompatTextView txtTipDesc = ViewBindings.findChildViewById(rootView, id);
      if (txtTipDesc == null) {
        break missingId;
      }

      id = R.id.txtTipHeader;
      AppCompatTextView txtTipHeader = ViewBindings.findChildViewById(rootView, id);
      if (txtTipHeader == null) {
        break missingId;
      }

      id = R.id.txtTitle;
      AppCompatTextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      return new ActivityAdvancePreferenceBinding((ConstraintLayout) rootView, btnCM, btnContinue,
          btnFt, btnTipGotIt, edtAstroSign, edtCaste, edtChildren, edtEducation, edtLanguage,
          edtLookingFor, edtReligion, edtSmoking, imageFaded, imgAstro, imgInfo, imgToolTip, ivBack,
          ivInfo2, labelPrefLocation, labelVerifiedProfiles, layoutAstroSign, layoutMain,
          layoutVerifiedProfiles, linLocAnim, nestedScrollView, relFadedView, rlToggle,
          segmentedHeight, toggleProfiles, toolTipArrow, txtHeight, txtTipDesc, txtTipHeader,
          txtTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
