// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.swipefwd.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemRechargePlanListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialTextView txtBuy;

  @NonNull
  public final AppCompatTextView txtData;

  @NonNull
  public final AppCompatTextView txtDataValue;

  @NonNull
  public final MaterialTextView txtPrice;

  @NonNull
  public final AppCompatTextView txtTalkTime;

  @NonNull
  public final AppCompatTextView txtTalkTimeValue;

  @NonNull
  public final AppCompatTextView txtValidity;

  @NonNull
  public final AppCompatTextView txtValidityValue;

  private ItemRechargePlanListBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialTextView txtBuy, @NonNull AppCompatTextView txtData,
      @NonNull AppCompatTextView txtDataValue, @NonNull MaterialTextView txtPrice,
      @NonNull AppCompatTextView txtTalkTime, @NonNull AppCompatTextView txtTalkTimeValue,
      @NonNull AppCompatTextView txtValidity, @NonNull AppCompatTextView txtValidityValue) {
    this.rootView = rootView;
    this.txtBuy = txtBuy;
    this.txtData = txtData;
    this.txtDataValue = txtDataValue;
    this.txtPrice = txtPrice;
    this.txtTalkTime = txtTalkTime;
    this.txtTalkTimeValue = txtTalkTimeValue;
    this.txtValidity = txtValidity;
    this.txtValidityValue = txtValidityValue;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemRechargePlanListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemRechargePlanListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_recharge_plan_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemRechargePlanListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.txtBuy;
      MaterialTextView txtBuy = ViewBindings.findChildViewById(rootView, id);
      if (txtBuy == null) {
        break missingId;
      }

      id = R.id.txtData;
      AppCompatTextView txtData = ViewBindings.findChildViewById(rootView, id);
      if (txtData == null) {
        break missingId;
      }

      id = R.id.txtDataValue;
      AppCompatTextView txtDataValue = ViewBindings.findChildViewById(rootView, id);
      if (txtDataValue == null) {
        break missingId;
      }

      id = R.id.txtPrice;
      MaterialTextView txtPrice = ViewBindings.findChildViewById(rootView, id);
      if (txtPrice == null) {
        break missingId;
      }

      id = R.id.txtTalkTime;
      AppCompatTextView txtTalkTime = ViewBindings.findChildViewById(rootView, id);
      if (txtTalkTime == null) {
        break missingId;
      }

      id = R.id.txtTalkTimeValue;
      AppCompatTextView txtTalkTimeValue = ViewBindings.findChildViewById(rootView, id);
      if (txtTalkTimeValue == null) {
        break missingId;
      }

      id = R.id.txtValidity;
      AppCompatTextView txtValidity = ViewBindings.findChildViewById(rootView, id);
      if (txtValidity == null) {
        break missingId;
      }

      id = R.id.txtValidityValue;
      AppCompatTextView txtValidityValue = ViewBindings.findChildViewById(rootView, id);
      if (txtValidityValue == null) {
        break missingId;
      }

      return new ItemRechargePlanListBinding((ConstraintLayout) rootView, txtBuy, txtData,
          txtDataValue, txtPrice, txtTalkTime, txtTalkTimeValue, txtValidity, txtValidityValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
