// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.swipefwd.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRequestsListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton btnAddToTribe;

  @NonNull
  public final AppCompatImageView ivBack;

  @NonNull
  public final AppCompatImageView ivSearch;

  @NonNull
  public final AppCompatImageView ivSearchClose;

  @NonNull
  public final ConstraintLayout layoutMain;

  @NonNull
  public final NestedScrollView nestedView;

  @NonNull
  public final RecyclerView rvActiveList;

  @NonNull
  public final RecyclerView rvExpiredList;

  @NonNull
  public final TextInputEditText searchRequest;

  @NonNull
  public final AppCompatTextView txtActiveRequest;

  @NonNull
  public final AppCompatTextView txtExpiredRequest;

  @NonNull
  public final AppCompatTextView txtNoRecordFound;

  @NonNull
  public final AppCompatTextView txtRequests;

  private ActivityRequestsListBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton btnAddToTribe, @NonNull AppCompatImageView ivBack,
      @NonNull AppCompatImageView ivSearch, @NonNull AppCompatImageView ivSearchClose,
      @NonNull ConstraintLayout layoutMain, @NonNull NestedScrollView nestedView,
      @NonNull RecyclerView rvActiveList, @NonNull RecyclerView rvExpiredList,
      @NonNull TextInputEditText searchRequest, @NonNull AppCompatTextView txtActiveRequest,
      @NonNull AppCompatTextView txtExpiredRequest, @NonNull AppCompatTextView txtNoRecordFound,
      @NonNull AppCompatTextView txtRequests) {
    this.rootView = rootView;
    this.btnAddToTribe = btnAddToTribe;
    this.ivBack = ivBack;
    this.ivSearch = ivSearch;
    this.ivSearchClose = ivSearchClose;
    this.layoutMain = layoutMain;
    this.nestedView = nestedView;
    this.rvActiveList = rvActiveList;
    this.rvExpiredList = rvExpiredList;
    this.searchRequest = searchRequest;
    this.txtActiveRequest = txtActiveRequest;
    this.txtExpiredRequest = txtExpiredRequest;
    this.txtNoRecordFound = txtNoRecordFound;
    this.txtRequests = txtRequests;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRequestsListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRequestsListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_requests_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRequestsListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAddToTribe;
      MaterialButton btnAddToTribe = ViewBindings.findChildViewById(rootView, id);
      if (btnAddToTribe == null) {
        break missingId;
      }

      id = R.id.ivBack;
      AppCompatImageView ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.ivSearch;
      AppCompatImageView ivSearch = ViewBindings.findChildViewById(rootView, id);
      if (ivSearch == null) {
        break missingId;
      }

      id = R.id.ivSearchClose;
      AppCompatImageView ivSearchClose = ViewBindings.findChildViewById(rootView, id);
      if (ivSearchClose == null) {
        break missingId;
      }

      ConstraintLayout layoutMain = (ConstraintLayout) rootView;

      id = R.id.nestedView;
      NestedScrollView nestedView = ViewBindings.findChildViewById(rootView, id);
      if (nestedView == null) {
        break missingId;
      }

      id = R.id.rvActiveList;
      RecyclerView rvActiveList = ViewBindings.findChildViewById(rootView, id);
      if (rvActiveList == null) {
        break missingId;
      }

      id = R.id.rvExpiredList;
      RecyclerView rvExpiredList = ViewBindings.findChildViewById(rootView, id);
      if (rvExpiredList == null) {
        break missingId;
      }

      id = R.id.searchRequest;
      TextInputEditText searchRequest = ViewBindings.findChildViewById(rootView, id);
      if (searchRequest == null) {
        break missingId;
      }

      id = R.id.txtActiveRequest;
      AppCompatTextView txtActiveRequest = ViewBindings.findChildViewById(rootView, id);
      if (txtActiveRequest == null) {
        break missingId;
      }

      id = R.id.txtExpiredRequest;
      AppCompatTextView txtExpiredRequest = ViewBindings.findChildViewById(rootView, id);
      if (txtExpiredRequest == null) {
        break missingId;
      }

      id = R.id.txtNoRecordFound;
      AppCompatTextView txtNoRecordFound = ViewBindings.findChildViewById(rootView, id);
      if (txtNoRecordFound == null) {
        break missingId;
      }

      id = R.id.txtRequests;
      AppCompatTextView txtRequests = ViewBindings.findChildViewById(rootView, id);
      if (txtRequests == null) {
        break missingId;
      }

      return new ActivityRequestsListBinding((ConstraintLayout) rootView, btnAddToTribe, ivBack,
          ivSearch, ivSearchClose, layoutMain, nestedView, rvActiveList, rvExpiredList,
          searchRequest, txtActiveRequest, txtExpiredRequest, txtNoRecordFound, txtRequests);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
