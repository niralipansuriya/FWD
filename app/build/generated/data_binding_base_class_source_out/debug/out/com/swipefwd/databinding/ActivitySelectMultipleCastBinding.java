// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.AppCompatToggleButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textfield.TextInputEditText;
import com.swipefwd.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySelectMultipleCastBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialCardView cardList;

  @NonNull
  public final AppCompatImageView ivClose;

  @NonNull
  public final RecyclerView layoutSelectedCast;

  @NonNull
  public final NestedScrollView nestedView;

  @NonNull
  public final RecyclerView rcvCast;

  @NonNull
  public final AppCompatToggleButton toggleRunOut;

  @NonNull
  public final TextInputEditText txtCastName;

  @NonNull
  public final AppCompatTextView txtIndex;

  @NonNull
  public final AppCompatTextView txtRunOutOf;

  @NonNull
  public final MaterialButton txtSkip;

  @NonNull
  public final MaterialButton txtSubmit;

  @NonNull
  public final AppCompatTextView txtTitle;

  private ActivitySelectMultipleCastBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialCardView cardList, @NonNull AppCompatImageView ivClose,
      @NonNull RecyclerView layoutSelectedCast, @NonNull NestedScrollView nestedView,
      @NonNull RecyclerView rcvCast, @NonNull AppCompatToggleButton toggleRunOut,
      @NonNull TextInputEditText txtCastName, @NonNull AppCompatTextView txtIndex,
      @NonNull AppCompatTextView txtRunOutOf, @NonNull MaterialButton txtSkip,
      @NonNull MaterialButton txtSubmit, @NonNull AppCompatTextView txtTitle) {
    this.rootView = rootView;
    this.cardList = cardList;
    this.ivClose = ivClose;
    this.layoutSelectedCast = layoutSelectedCast;
    this.nestedView = nestedView;
    this.rcvCast = rcvCast;
    this.toggleRunOut = toggleRunOut;
    this.txtCastName = txtCastName;
    this.txtIndex = txtIndex;
    this.txtRunOutOf = txtRunOutOf;
    this.txtSkip = txtSkip;
    this.txtSubmit = txtSubmit;
    this.txtTitle = txtTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySelectMultipleCastBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySelectMultipleCastBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_select_multiple_cast, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySelectMultipleCastBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardList;
      MaterialCardView cardList = ViewBindings.findChildViewById(rootView, id);
      if (cardList == null) {
        break missingId;
      }

      id = R.id.ivClose;
      AppCompatImageView ivClose = ViewBindings.findChildViewById(rootView, id);
      if (ivClose == null) {
        break missingId;
      }

      id = R.id.layoutSelectedCast;
      RecyclerView layoutSelectedCast = ViewBindings.findChildViewById(rootView, id);
      if (layoutSelectedCast == null) {
        break missingId;
      }

      id = R.id.nestedView;
      NestedScrollView nestedView = ViewBindings.findChildViewById(rootView, id);
      if (nestedView == null) {
        break missingId;
      }

      id = R.id.rcvCast;
      RecyclerView rcvCast = ViewBindings.findChildViewById(rootView, id);
      if (rcvCast == null) {
        break missingId;
      }

      id = R.id.toggleRunOut;
      AppCompatToggleButton toggleRunOut = ViewBindings.findChildViewById(rootView, id);
      if (toggleRunOut == null) {
        break missingId;
      }

      id = R.id.txtCastName;
      TextInputEditText txtCastName = ViewBindings.findChildViewById(rootView, id);
      if (txtCastName == null) {
        break missingId;
      }

      id = R.id.txtIndex;
      AppCompatTextView txtIndex = ViewBindings.findChildViewById(rootView, id);
      if (txtIndex == null) {
        break missingId;
      }

      id = R.id.txtRunOutOf;
      AppCompatTextView txtRunOutOf = ViewBindings.findChildViewById(rootView, id);
      if (txtRunOutOf == null) {
        break missingId;
      }

      id = R.id.txtSkip;
      MaterialButton txtSkip = ViewBindings.findChildViewById(rootView, id);
      if (txtSkip == null) {
        break missingId;
      }

      id = R.id.txtSubmit;
      MaterialButton txtSubmit = ViewBindings.findChildViewById(rootView, id);
      if (txtSubmit == null) {
        break missingId;
      }

      id = R.id.txtTitle;
      AppCompatTextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      return new ActivitySelectMultipleCastBinding((ConstraintLayout) rootView, cardList, ivClose,
          layoutSelectedCast, nestedView, rcvCast, toggleRunOut, txtCastName, txtIndex, txtRunOutOf,
          txtSkip, txtSubmit, txtTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
