// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.swipefwd.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentInviteListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatImageView ivClose;

  @NonNull
  public final AppCompatImageView ivSearch;

  @NonNull
  public final ConstraintLayout layoutMain;

  @NonNull
  public final RelativeLayout layoutSearch;

  @NonNull
  public final NestedScrollView nestedView;

  @NonNull
  public final RecyclerView rvActiveList;

  @NonNull
  public final RecyclerView rvExpiredList;

  @NonNull
  public final TextInputEditText searchContact;

  @NonNull
  public final AppCompatTextView txtActiveRequest;

  @NonNull
  public final AppCompatTextView txtExpiredRequest;

  @NonNull
  public final AppCompatTextView txtNoRecordFound;

  @NonNull
  public final View viewExpired;

  @NonNull
  public final View viewPending;

  private FragmentInviteListBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatImageView ivClose, @NonNull AppCompatImageView ivSearch,
      @NonNull ConstraintLayout layoutMain, @NonNull RelativeLayout layoutSearch,
      @NonNull NestedScrollView nestedView, @NonNull RecyclerView rvActiveList,
      @NonNull RecyclerView rvExpiredList, @NonNull TextInputEditText searchContact,
      @NonNull AppCompatTextView txtActiveRequest, @NonNull AppCompatTextView txtExpiredRequest,
      @NonNull AppCompatTextView txtNoRecordFound, @NonNull View viewExpired,
      @NonNull View viewPending) {
    this.rootView = rootView;
    this.ivClose = ivClose;
    this.ivSearch = ivSearch;
    this.layoutMain = layoutMain;
    this.layoutSearch = layoutSearch;
    this.nestedView = nestedView;
    this.rvActiveList = rvActiveList;
    this.rvExpiredList = rvExpiredList;
    this.searchContact = searchContact;
    this.txtActiveRequest = txtActiveRequest;
    this.txtExpiredRequest = txtExpiredRequest;
    this.txtNoRecordFound = txtNoRecordFound;
    this.viewExpired = viewExpired;
    this.viewPending = viewPending;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentInviteListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentInviteListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_invite_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentInviteListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ivClose;
      AppCompatImageView ivClose = ViewBindings.findChildViewById(rootView, id);
      if (ivClose == null) {
        break missingId;
      }

      id = R.id.ivSearch;
      AppCompatImageView ivSearch = ViewBindings.findChildViewById(rootView, id);
      if (ivSearch == null) {
        break missingId;
      }

      ConstraintLayout layoutMain = (ConstraintLayout) rootView;

      id = R.id.layoutSearch;
      RelativeLayout layoutSearch = ViewBindings.findChildViewById(rootView, id);
      if (layoutSearch == null) {
        break missingId;
      }

      id = R.id.nestedView;
      NestedScrollView nestedView = ViewBindings.findChildViewById(rootView, id);
      if (nestedView == null) {
        break missingId;
      }

      id = R.id.rvActiveList;
      RecyclerView rvActiveList = ViewBindings.findChildViewById(rootView, id);
      if (rvActiveList == null) {
        break missingId;
      }

      id = R.id.rvExpiredList;
      RecyclerView rvExpiredList = ViewBindings.findChildViewById(rootView, id);
      if (rvExpiredList == null) {
        break missingId;
      }

      id = R.id.searchContact;
      TextInputEditText searchContact = ViewBindings.findChildViewById(rootView, id);
      if (searchContact == null) {
        break missingId;
      }

      id = R.id.txtActiveRequest;
      AppCompatTextView txtActiveRequest = ViewBindings.findChildViewById(rootView, id);
      if (txtActiveRequest == null) {
        break missingId;
      }

      id = R.id.txtExpiredRequest;
      AppCompatTextView txtExpiredRequest = ViewBindings.findChildViewById(rootView, id);
      if (txtExpiredRequest == null) {
        break missingId;
      }

      id = R.id.txtNoRecordFound;
      AppCompatTextView txtNoRecordFound = ViewBindings.findChildViewById(rootView, id);
      if (txtNoRecordFound == null) {
        break missingId;
      }

      id = R.id.viewExpired;
      View viewExpired = ViewBindings.findChildViewById(rootView, id);
      if (viewExpired == null) {
        break missingId;
      }

      id = R.id.viewPending;
      View viewPending = ViewBindings.findChildViewById(rootView, id);
      if (viewPending == null) {
        break missingId;
      }

      return new FragmentInviteListBinding((ConstraintLayout) rootView, ivClose, ivSearch,
          layoutMain, layoutSearch, nestedView, rvActiveList, rvExpiredList, searchContact,
          txtActiveRequest, txtExpiredRequest, txtNoRecordFound, viewExpired, viewPending);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
