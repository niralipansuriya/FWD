// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.addisonelliott.segmentedbutton.SegmentedButton;
import com.addisonelliott.segmentedbutton.SegmentedButtonGroup;
import com.google.android.material.button.MaterialButton;
import com.swipefwd.R;
import com.swipefwd.utils.crystalRangeSeekbar.widgets.CrystalRangeSeekbar;
import com.swipefwd.utils.crystalRangeSeekbar.widgets.CrystalSeekbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPreferencesBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final CrystalRangeSeekbar ageRangeSeekbar;

  @NonNull
  public final MaterialButton btnAdvancedFilters;

  @NonNull
  public final MaterialButton btnContinue;

  @NonNull
  public final SegmentedButton btnFemale;

  @NonNull
  public final SegmentedButton btnMale;

  @NonNull
  public final SegmentedButton btnNone;

  @NonNull
  public final SegmentedButtonGroup btnSegmentGender;

  @NonNull
  public final AppCompatImageView ivBack;

  @NonNull
  public final AppCompatTextView labelPrefLocation;

  @NonNull
  public final RelativeLayout layoutMain;

  @NonNull
  public final NestedScrollView layoutScroll;

  @NonNull
  public final CrystalSeekbar seekDistance;

  @NonNull
  public final AppCompatTextView txtAgeRange;

  @NonNull
  public final AppCompatTextView txtDistance;

  @NonNull
  public final AppCompatTextView txtPreference;

  private ActivityPreferencesBinding(@NonNull RelativeLayout rootView,
      @NonNull CrystalRangeSeekbar ageRangeSeekbar, @NonNull MaterialButton btnAdvancedFilters,
      @NonNull MaterialButton btnContinue, @NonNull SegmentedButton btnFemale,
      @NonNull SegmentedButton btnMale, @NonNull SegmentedButton btnNone,
      @NonNull SegmentedButtonGroup btnSegmentGender, @NonNull AppCompatImageView ivBack,
      @NonNull AppCompatTextView labelPrefLocation, @NonNull RelativeLayout layoutMain,
      @NonNull NestedScrollView layoutScroll, @NonNull CrystalSeekbar seekDistance,
      @NonNull AppCompatTextView txtAgeRange, @NonNull AppCompatTextView txtDistance,
      @NonNull AppCompatTextView txtPreference) {
    this.rootView = rootView;
    this.ageRangeSeekbar = ageRangeSeekbar;
    this.btnAdvancedFilters = btnAdvancedFilters;
    this.btnContinue = btnContinue;
    this.btnFemale = btnFemale;
    this.btnMale = btnMale;
    this.btnNone = btnNone;
    this.btnSegmentGender = btnSegmentGender;
    this.ivBack = ivBack;
    this.labelPrefLocation = labelPrefLocation;
    this.layoutMain = layoutMain;
    this.layoutScroll = layoutScroll;
    this.seekDistance = seekDistance;
    this.txtAgeRange = txtAgeRange;
    this.txtDistance = txtDistance;
    this.txtPreference = txtPreference;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPreferencesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPreferencesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_preferences, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPreferencesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ageRangeSeekbar;
      CrystalRangeSeekbar ageRangeSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (ageRangeSeekbar == null) {
        break missingId;
      }

      id = R.id.btnAdvancedFilters;
      MaterialButton btnAdvancedFilters = ViewBindings.findChildViewById(rootView, id);
      if (btnAdvancedFilters == null) {
        break missingId;
      }

      id = R.id.btnContinue;
      MaterialButton btnContinue = ViewBindings.findChildViewById(rootView, id);
      if (btnContinue == null) {
        break missingId;
      }

      id = R.id.btnFemale;
      SegmentedButton btnFemale = ViewBindings.findChildViewById(rootView, id);
      if (btnFemale == null) {
        break missingId;
      }

      id = R.id.btnMale;
      SegmentedButton btnMale = ViewBindings.findChildViewById(rootView, id);
      if (btnMale == null) {
        break missingId;
      }

      id = R.id.btnNone;
      SegmentedButton btnNone = ViewBindings.findChildViewById(rootView, id);
      if (btnNone == null) {
        break missingId;
      }

      id = R.id.btnSegmentGender;
      SegmentedButtonGroup btnSegmentGender = ViewBindings.findChildViewById(rootView, id);
      if (btnSegmentGender == null) {
        break missingId;
      }

      id = R.id.ivBack;
      AppCompatImageView ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.labelPrefLocation;
      AppCompatTextView labelPrefLocation = ViewBindings.findChildViewById(rootView, id);
      if (labelPrefLocation == null) {
        break missingId;
      }

      RelativeLayout layoutMain = (RelativeLayout) rootView;

      id = R.id.layoutScroll;
      NestedScrollView layoutScroll = ViewBindings.findChildViewById(rootView, id);
      if (layoutScroll == null) {
        break missingId;
      }

      id = R.id.seekDistance;
      CrystalSeekbar seekDistance = ViewBindings.findChildViewById(rootView, id);
      if (seekDistance == null) {
        break missingId;
      }

      id = R.id.txtAgeRange;
      AppCompatTextView txtAgeRange = ViewBindings.findChildViewById(rootView, id);
      if (txtAgeRange == null) {
        break missingId;
      }

      id = R.id.txtDistance;
      AppCompatTextView txtDistance = ViewBindings.findChildViewById(rootView, id);
      if (txtDistance == null) {
        break missingId;
      }

      id = R.id.txtPreference;
      AppCompatTextView txtPreference = ViewBindings.findChildViewById(rootView, id);
      if (txtPreference == null) {
        break missingId;
      }

      return new ActivityPreferencesBinding((RelativeLayout) rootView, ageRangeSeekbar,
          btnAdvancedFilters, btnContinue, btnFemale, btnMale, btnNone, btnSegmentGender, ivBack,
          labelPrefLocation, layoutMain, layoutScroll, seekDistance, txtAgeRange, txtDistance,
          txtPreference);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
