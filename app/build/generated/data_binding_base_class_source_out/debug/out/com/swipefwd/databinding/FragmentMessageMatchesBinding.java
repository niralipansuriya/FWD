// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.swipefwd.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentMessageMatchesBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout llMatches;

  @NonNull
  public final LinearLayout llNoMatches;

  @NonNull
  public final RecyclerView rvMatches;

  @NonNull
  public final RecyclerView rvMessage;

  @NonNull
  public final TextView txtNoMessages;

  private FragmentMessageMatchesBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout llMatches, @NonNull LinearLayout llNoMatches,
      @NonNull RecyclerView rvMatches, @NonNull RecyclerView rvMessage,
      @NonNull TextView txtNoMessages) {
    this.rootView = rootView;
    this.llMatches = llMatches;
    this.llNoMatches = llNoMatches;
    this.rvMatches = rvMatches;
    this.rvMessage = rvMessage;
    this.txtNoMessages = txtNoMessages;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMessageMatchesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMessageMatchesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_message_matches, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMessageMatchesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.llMatches;
      LinearLayout llMatches = ViewBindings.findChildViewById(rootView, id);
      if (llMatches == null) {
        break missingId;
      }

      id = R.id.llNoMatches;
      LinearLayout llNoMatches = ViewBindings.findChildViewById(rootView, id);
      if (llNoMatches == null) {
        break missingId;
      }

      id = R.id.rvMatches;
      RecyclerView rvMatches = ViewBindings.findChildViewById(rootView, id);
      if (rvMatches == null) {
        break missingId;
      }

      id = R.id.rvMessage;
      RecyclerView rvMessage = ViewBindings.findChildViewById(rootView, id);
      if (rvMessage == null) {
        break missingId;
      }

      id = R.id.txtNoMessages;
      TextView txtNoMessages = ViewBindings.findChildViewById(rootView, id);
      if (txtNoMessages == null) {
        break missingId;
      }

      return new FragmentMessageMatchesBinding((LinearLayout) rootView, llMatches, llNoMatches,
          rvMatches, rvMessage, txtNoMessages);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
