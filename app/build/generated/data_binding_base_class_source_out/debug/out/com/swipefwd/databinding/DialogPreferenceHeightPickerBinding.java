// Generated by view binder compiler. Do not edit!
package com.swipefwd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.AppCompatToggleButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.swipefwd.R;
import com.swipefwd.utils.crystalRangeSeekbar.widgets.CrystalRangeSeekbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogPreferenceHeightPickerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton btnSubmit;

  @NonNull
  public final MaterialCardView cardBottom;

  @NonNull
  public final CrystalRangeSeekbar heightRangeSeekbar;

  @NonNull
  public final AppCompatImageView imgDialogGradient;

  @NonNull
  public final RelativeLayout pullDown;

  @NonNull
  public final RelativeLayout relHeight;

  @NonNull
  public final AppCompatToggleButton toggleRunOut;

  @NonNull
  public final AppCompatTextView txtAgeRange;

  @NonNull
  public final AppCompatTextView txtHeight;

  @NonNull
  public final AppCompatTextView txtRunOutOf;

  @NonNull
  public final MaterialButton txtSkip;

  private DialogPreferenceHeightPickerBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton btnSubmit, @NonNull MaterialCardView cardBottom,
      @NonNull CrystalRangeSeekbar heightRangeSeekbar,
      @NonNull AppCompatImageView imgDialogGradient, @NonNull RelativeLayout pullDown,
      @NonNull RelativeLayout relHeight, @NonNull AppCompatToggleButton toggleRunOut,
      @NonNull AppCompatTextView txtAgeRange, @NonNull AppCompatTextView txtHeight,
      @NonNull AppCompatTextView txtRunOutOf, @NonNull MaterialButton txtSkip) {
    this.rootView = rootView;
    this.btnSubmit = btnSubmit;
    this.cardBottom = cardBottom;
    this.heightRangeSeekbar = heightRangeSeekbar;
    this.imgDialogGradient = imgDialogGradient;
    this.pullDown = pullDown;
    this.relHeight = relHeight;
    this.toggleRunOut = toggleRunOut;
    this.txtAgeRange = txtAgeRange;
    this.txtHeight = txtHeight;
    this.txtRunOutOf = txtRunOutOf;
    this.txtSkip = txtSkip;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPreferenceHeightPickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPreferenceHeightPickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_preference_height_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPreferenceHeightPickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSubmit;
      MaterialButton btnSubmit = ViewBindings.findChildViewById(rootView, id);
      if (btnSubmit == null) {
        break missingId;
      }

      id = R.id.cardBottom;
      MaterialCardView cardBottom = ViewBindings.findChildViewById(rootView, id);
      if (cardBottom == null) {
        break missingId;
      }

      id = R.id.heightRangeSeekbar;
      CrystalRangeSeekbar heightRangeSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (heightRangeSeekbar == null) {
        break missingId;
      }

      id = R.id.imgDialogGradient;
      AppCompatImageView imgDialogGradient = ViewBindings.findChildViewById(rootView, id);
      if (imgDialogGradient == null) {
        break missingId;
      }

      id = R.id.pullDown;
      RelativeLayout pullDown = ViewBindings.findChildViewById(rootView, id);
      if (pullDown == null) {
        break missingId;
      }

      id = R.id.relHeight;
      RelativeLayout relHeight = ViewBindings.findChildViewById(rootView, id);
      if (relHeight == null) {
        break missingId;
      }

      id = R.id.toggleRunOut;
      AppCompatToggleButton toggleRunOut = ViewBindings.findChildViewById(rootView, id);
      if (toggleRunOut == null) {
        break missingId;
      }

      id = R.id.txtAgeRange;
      AppCompatTextView txtAgeRange = ViewBindings.findChildViewById(rootView, id);
      if (txtAgeRange == null) {
        break missingId;
      }

      id = R.id.txtHeight;
      AppCompatTextView txtHeight = ViewBindings.findChildViewById(rootView, id);
      if (txtHeight == null) {
        break missingId;
      }

      id = R.id.txtRunOutOf;
      AppCompatTextView txtRunOutOf = ViewBindings.findChildViewById(rootView, id);
      if (txtRunOutOf == null) {
        break missingId;
      }

      id = R.id.txtSkip;
      MaterialButton txtSkip = ViewBindings.findChildViewById(rootView, id);
      if (txtSkip == null) {
        break missingId;
      }

      return new DialogPreferenceHeightPickerBinding((ConstraintLayout) rootView, btnSubmit,
          cardBottom, heightRangeSeekbar, imgDialogGradient, pullDown, relHeight, toggleRunOut,
          txtAgeRange, txtHeight, txtRunOutOf, txtSkip);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
